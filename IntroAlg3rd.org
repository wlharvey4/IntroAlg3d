# -*- mode: org; fill-column: 79; -*-

#+TITLE:Introduction to Algorithms
#+SUBTITLE:3rd Edition 2009 {{{VERSION}}} {{{OUTLINE}}}
#+AUTHOR:Thomas H. Cormen
#+SUBAUTHOR:Charles H. Leiserson
#+SUBAUTHOR:Ronald L. Rivest
#+SUBAUTHOR:Clifford Stein
#+DATE:2019-07-26 13:35
#+MACRO: VERSION Version 0.0.3
#+MACRO: OUTLINE EDITION 0.2
#+CREATOR:WLHarvey4

{{{title}}}

#+texinfo: @insertcopying

* Preface
  :PROPERTIES:
  :UNNUMBERED:
  :END:

  This book provides a comprehensive introduction to the study of
  computer algorithms.  It presents many algorithms and covers them in
  considerable depth, yet makes their design and analysis accessible
  to all levels of readers.  The authors have tried to keep
  explanations elementary without sacrificing depth of coverage or
  mathematical rigor.

  Each chapter presents an algorithmn, a design technique, an
  application area, or a related topic.  Algorithms are described in
  English and in a pseudocode designed to be readable by anyone who
  has done a little programming.  The book contains 244 figures
  illustrating how algorithms work.  Since the authors emphasize
  /efficiency/ as a design criteria, they include careful analyses of
  the running times of all algorithms.

  The text is intended primarly for use in undergraduate or graduate
  courses in algorithmns or data structures.  Because it discusses
  engineering issues in algorithm design, as well as mathematical
  aspects, it is equally well suited for self-study by technical
  professionals.

** To the Teacher

   The authors have designed the book to be both versatile and
   complete.  They have provided considerably more material than can
   fit in a typical one-term course, so the teacher should pick and
   choose the material that best supports the course he or she wishes
   to teach.

   The chapters are relatively self-contained, so there is no need to
   worry about an unexpected and unnecessary dependence of one chapter
   on another.  Each chapter presents the easier material first and
   the more difficult material later, with section boundaries marking
   natural stopping points.  In an undergraduate course, you might use
   only the earlier sections from a chapter; in a graduate course, you
   might cover the entire chapter.

   The authors have included 957 exercises and 158 problems.  Each
   section ends with exercises and each chapter ends with problems.
   The exercises are generally short questions that test basic mastery
   of the material.  Some are simple self-check thought exercises,
   whereas others are more substantial and are suitable as assigned
   homework.  The problems are more elaborate case sttudies that often
   introduce new material; they often consist of several questions
   that lead the student through the steps required to arrive at a
   solution.

   #+cindex: web site
   #+cindex: solutions
   The authors have made publicly available solutions to some, but not
   all, of the problems and exercises.  The web site
   [[http://mitpress/mit.edu/algorithms/]], links to these solutions.  The
   authors expect the set of solutions that they post to grow slowly
   over time.

   #+cindex: graduate level problems
   The authors have starred the sections and exercises thtat are more
   suitable for graduate students than undergraduates.  A starred
   section is not necessarily more difficult than an unstarred one,
   but it may require an understanding of more advanced mathematics.
   Likewise, starred exercises may require an advanced background or
   more than average creativity.

** To the Student

   The authors hope this textbook provides an enjoyable introduction
   to the field of algorithms.  They have attempted to make every
   algorithm accessible and interesting.  To help the student
   encounter unfamiliar or difficult algorithms, they describe each
   one in a step-by-step manner.  They also provide careful
   explanations of the mathematics needed to understand the analysis
   of the algorithms.  If you already have some familiarity with a
   topic, you will find the chapters organized so that you can skim
   introductory sections and proceed quickly to the more advanced
   material.

   This is a large book, and your class will probably cover only a
   portion of its material.  The authors have tried to make this a
   book that will be useful now as a course text book and also later
   in your career as a mathematical desk reference or as an
   engineering handbook.

*** Prerequisites for Reading this Book

    #+cindex: prerequisites
    - The student should have some programming experience.  In
      particular, the student should understand *recursive procedures*
      and *simple data structures* such as /arrays/ and /linked lists/.
    - The student should have some facility with *mathematical
      proofs*, and especially *proofs* by /mathematical induction/.  A
      few portions of the book rely on some knowledge of elementary
      calculus.  Beyond that, Parts I and VIII of this book teach the
      student all the mathematical techniques they will need.

** To the Professional

   The wide range of topics in this book makes it an excellent
   handbook on algorithms.  Because each chapter is relatively
   self-contained, one can focus in on the topics of most interest.

   Most of the algorithms discussed have great practical utility.  The
   authors therefore address implementation concerns and other
   engineering issues.  They often provide practical alternatives to
   the few algorithms that are primarily of theoretical interest.

   #+cindex: pseudocode
   If one wishes to implement any of the algorithms, one should find
   the translation of the pseudocode into a favorite programming
   language to be a fairly straightforward task.  The authors have
   designed the pseudocode to present each algorithm clearly and
   succinctly.  Consequently, the authors do not address
   error-handling and other software-engineering issues that require
   specific assumptions about one's programming environment.  The
   authors attempt to present each algorithm simply and directly
   without allowing the idiosyncrasies of a particular programming
   language to obscure its essence.

** To our Collegues

   The authors have supplied an extensive bibliography and pointers to
   the current literature.  Each chapter ends with a set of chapter
   notes that give historical details and references.  The chapter
   notes do not provide a complete reference to the whole field of
   algorithms, however.  Space constraints prevented the authors from
   including many interesting algorithms.

#+TEXINFO: @part FOUNDATIONS

* Main Text

#+TEXINFO: @part Foundations

  This part will start you thinking about designing and analyzing
  algorithms.

** Introduction to Foundations
:PROPERTIES:
:unnumbered: t
:END:

** The Role of Algorithms in Computing

** Getting Started

** Growth in Functions

** Divide-and-Conquer

** Probabilistic Analysis and Randomized Algorithms

#+TEXINFO: @part Sorting and Order Statistics

** Introduction to Sorting
:PROPERTIES:
:unnumbered: t
:END:

** Heapsort

** Quicksort

** Sorting in Linear Time

** Medians and Order Statistics

#+TEXINFO: @part Data Structures

** Elementary Data Structures

** Hash Tables

** Binary Search Trees

** Red-Black Trees

** Augmenting Data Structures

#+TEXINFO: @part Advanced Design and Analysis Techniques

** Introduction to Advanced Design and Analysis
:PROPERTIES:
:unnumbered: t
:END:

** Dynamic Programming

** Greedy Algorithms

** Amortized Analysis

#+TEXINFO: @part Advanced Data Structures

** Introduction to Advanced Data Structures
:PROPERTIES:
:unnumbered: t
:END:

** B-Trees

** Fibonacci Heaps

** van Emde Boas Trees

** Data Structures for Disjoint Sets

#+TEXINFO: @part Graph Algorithms

** Introduction to Graph Algorithms
:PROPERTIES:
:unnumbered: t
:END:

** Elementary Graph Algorithms

** Minimum Spanning Trees

** Single-Source Shortest Path

** All-Pairs Shortest Paths

** Maximum Flow

#+TEXINFO: @part Selected Topics

** Introduction to Selected Topics
:PROPERTIES:
:unnumbered: y
:END:

** Multithreaded Algorithms

** Matrix Operations

** Linear Programming 

** Polynomials and the FFT

** Number-Theoretic Algorithms

** String Matching

** Computational Geometry

** NP-Completeness

** Approximation Algorithms

#+TEXINFO: @part Mathematical Background

* Introduction to Mathematical Background
  :PROPERTIES:
  :UNNUMBERED: t
  :END:

  #+cindex: mathematical tools
  When analyzing algorithms, one often needs to draw upon a body of
  mathematical tools.  Some of these tools are as simple as
  high-school algebra, but others may be new.  Part I presented how to
  manipulate asymptotic notations and solve recurrences.

  This appendix comprises a compendium of several other concepts and
  methods used to analyze algorithms.  You should treat this appendix
  as reference material.  Exercises and problems are included in order
  for you to improve your skills in these areas.

  {{{heading(Appendix A Summations)}}}

  #+cindexz; bounding summatins
  Appendix A offers methods for evaluating and bounding summations,
  which occur frequently in the analysis of algorithms.  Many of the
  formulas here appear in any calculus text, but you will find it
  convenient to have these methods compiled in one place.

  {{{heading(Appendix B Sets Relations Functions Graphs Trees)}}}

  #+cindex: sets
  #+cindex: relations
  #+cindex: functions
  #+cindex: graphs
  #+cindex: trees
  Appendix B contains basic definitions for:

  - sets
  - relations
  - functions
  - graphs
  - trees


  It also gives some basic properties of these mathematical objects.

  {{{heading(Appendix C Counting Permutations Combinations)}}}

  Appendix C begins with elementary principles of counting:

  #+cindex: counting
  #+cindex: permutations
  #+cindex: combinations
  - permutations
  - combinations


  #+cindex: probability
  The remainder contains definitions and properties of basic
  probability.  Most of the algorithms in this book require no
  probability for the analysis, and thus you can easily omit the
  latter sections of the chapter on a first reading Later when you
  encounter a probabilistic analysis that you want to understand
  better, you will find Appendix C well organized for reference
  purposes.

  {{{heading(Appendix D Matrices Operations Properties)}}}

  #+cindex: matrices
  You have probably seen most of this material already if you have
  taken a course in linear algebra, but you might find it helpful to
  have one place to look for our notation and definitions.

* Summations
  :PROPERTIES:
  :APPENDIX: t
  :END:

* Sets Etc.
  :PROPERTIES:
  :APPENDIX: t
  :END:

* Counting and Probability
  :PROPERTIES:
  :APPENDIX: t
  :END:

* Matrices
  :PROPERTIES:
  :APPENDIX: t
  :END:

* Copyright Page
:PROPERTIES:
:copying:  t
:END:
Text \copy 2015 by {{{author}}} /et al./

Outline \copy 2019 by LOLH
* Concept Index
  :PROPERTIES:
  :INDEX:    cp
  :END:

* Program Index
:PROPERTIES:
:unnumbered: t
:index:    pg
:END:

* Function Index
:PROPERTIES:
:index:    fn
:unnumbered: t
:END:

* Export Settings                                                  :noexport:
#+TEXINFO_FILENAME: IntroAlg3rd.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+TEXINFO_DIR_CATEGORY:Computer Science
#+TEXINFO_DIR_TITLE:Intro to Algorithms
#+TEXINFO_DIR_DESC:Introduction to Algorithms 3rd Cormen
#+TEXINFO_PRINTED_TITLE:Introduction to Algorithms

* Macro Definitions                                                :noexport:
#+MACRO: heading @@texinfo:@heading $1@@
* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"9/^\\#\\+DATE:%:y-%02m-%02d %02H:%02M$"
# End:
